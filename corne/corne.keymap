/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define NUM 1
#define SYM 2
#define NAV 3
#define FUN 4
#define CONF 5

// BEHAVIORS CONFIGURATION

&lt {
    tapping-term-ms = <130>; // This is the value already set by default
};

// KEYMAPS

/ {
        keymap {
                compatible = "zmk,keymap";

                alpha_layer {
// -----------------------------------------------------------------------------------------
// | ESC    | Q | W | E       | R       | T         |          |  Y         | U     |  I     |  O  |  P  | BSPC   |
// | TAB    | A | S | D       | F [num] | G         |          |  H         | J     |  K     |  L  |  ;  | '      |
// | LSHIFT | Z | X | C       | V [fun] | B         |          |  N         | M     |  ,     |  .  |  /  | RSHIFT |
//                  | LALT    | LGUI    | SPC [num] |  [conf]  |  ENT [sym] | [nav] |  RCTRL |
                        bindings = <
   &kp ESC    &kp Q &kp W &kp E    &kp R     &kp T            &kp Y         &kp U         &kp I     &kp O   &kp P     &kp BSPC
   &kp TAB    &kp A &kp S &kp D    &lt NUM F &kp G            &kp H         &kp J         &kp K     &kp L   &kp SEMI  &kp SQT
   &kp LSHIFT &kp Z &kp X &kp C    &lt FUN V &kp B            &kp N         &kp M         &kp COMMA &kp DOT &kp SLASH &kp RSHIFT
                          &kp LALT &kp LGUI  &lt NUM SPACE    &lt SYM SPACE &lt NAV ENTER &kp RCTRL
                        >;
                };

                num {
// -----------------------------------------------------------------------------------------
// | XXX |  1  |  2  |  3  |  4  |  5  |   |  6   |  7  |  8  |  9  |  0  | XXX |
// | XXX |     |  +  |  *  |     |     |   |      |  4  |  5  |  6  |  =  |     |
// | XXX |     |  -  |  /  |     |     |   |      |  1  |  2  |  3  |     | XXX |
//                   | XXX | XXX | XXX |   |[conf]| XXX | XXX |
                        bindings = <
   &trans &kp N1 &kp N2    &kp N3    &kp N4 &kp N5         &kp N6 &kp N7 &kp N8 &kp N9 &kp N0    &trans
   &trans &none  &kp PLUS  &kp ASTRK &none  &none          &none  &kp N4 &kp N5 &kp N6 &kp EQUAL &none
   &trans &none  &kp MINUS &kp SLASH &none  &none          &none  &kp N1 &kp N2 &kp N3 &none     &trans
                           &trans    &trans &trans         &trans &trans &trans
                        >;
                };

                sym {
// -----------------------------------------------------------------------------------------
// | "|" |  !  |  "  | #   | $   |   %  |   | &   | /   | *   |  ?  | = | XXX |
// | XXX |  @  |  +  | *   | {   |   [  |   | ]   | }   | -   |  ^  | : | `   |
// | XXX |     |     |     | (   |   <  |   | >   | )   | _   |     | \ | XXX |
//                   | XXX | XXX |[conf]|   | XXX | XXX | XXX |
                        bindings = <
   &kp PIPE &kp EXCL  &kp DQT   &kp HASH  &kp DLLR &kp PRCNT         &kp AMPS  &kp SLASH  &kp ASTRK &kp QMARK &kp EQUAL  &trans
   &trans   &kp AT    &kp PLUS  &kp ASTRK &kp LBRC &kp LBKT          &kp RBKT  &kp RBRC   &kp MINUS &kp CARET &kp COLON  &kp GRAVE
   &trans   &kp TILDE &trans    &trans    &kp LPAR &kp LT            &kp GT    &kp RPAR   &kp UNDER &none     &kp BSLH   &trans
                                &trans    &trans   &trans            &trans    &trans     &trans
                        >;
                };

                nav {
// -----------------------------------------------------------------------------------------
// | XXX |     |     |     |     |     |   |     | P_UP | UP   |       |     |  XXX |
// | XXX |     |     |     |     |     |   |     | LEFT | DOWN | RIGHT |     |      |
// | XXX |     |     |     |     |     |   |     | P_DN |      |       |     |  XXX |
//                   | XXX | XXX | XXX |   | XXX | XXX  | XXX  |
                        bindings = <
   &trans &none &none &none  &none  &none     &none  &kp PG_UP &kp UP   &none     &none &trans
   &trans &none &none &none  &none  &none     &none  &kp LEFT  &kp DOWN &kp RIGHT &none &none
   &trans &none &none &none  &none  &none     &none  &kp PG_DN &none    &none     &none &trans
                      &trans &trans &trans    &trans &trans    &trans
                        >;
                };

                fun {
// -----------------------------------------------------------------------------------------
// | XXX |     |     |     |     |     |   |     | F7  | F8  | F9 | F12 |  XXX |
// | XXX | F13 | F14 | F15 |     |     |   |     | F4  | F5  | F6 | F11 |      |
// | XXX |     |     |     |     |     |   |     | F1  | F2  | F3 | F10 |  XXX |
//                   | XXX | XXX | XXX |   | XXX | XXX | XXX |
                        bindings = <
   &trans &none   &none   &none   &none  &none     &none  &kp F7 &kp F8 &kp F9 &kp F12 &none
   &trans &kp F13 &kp F14 &kp F15 &none  &none     &none  &kp F4 &kp F5 &kp F6 &kp F11 &none
   &trans &none   &none   &none   &none  &none     &none  &kp F1 &kp F2 &kp F3 &kp F10 &trans
                          &trans  &trans &trans    &trans &trans &trans
                        >;
                };
                
                conf {
// -----------------------------------------------------------------------------------------
// | OFF |     | MUTE | VOL- | VOL+ |     |         |     |       |     |     |     |CLR AL|
// |     |     | PREV | PLAY | NEXT |     |         |     | BTCLR |     |     |     |      |
// |     |     |      | BRGD | BRGU |     |         |     | BT1   | BT2 | BT3 |     |      |
//                    |      |      |     |         |     |       |     |
                        bindings = <
   &soft_off &none &kp C_MUTE &kp C_VOL_DN  &kp C_VOL_UP &none          &none  &none        &none        &none        &none &bt BT_CLR_ALL
   &none     &none &kp C_PREV &kp C_PLAY    &kp C_NEXT   &none          &none  &none        &bt BT_CLR   &none        &none &none
   &none     &none &none      &kp C_BRI_DN  &kp C_BRI_UP &none          &none  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &none &none
                              &none         &none        &trans         &trans &none        &none
                        >;
                };

                conditional_layers {
                        compatible = "zmk,conditional-layers";
                        
                        tri_layer {
                                if-layers = <NUM SYM>;
                                then-layer = <CONF>;
                        };
                };

                combos { 
                        compatible = "zmk,combos";

                        combo_caps_lock {
                                timeout-ms = <50>;
                                key-positions = <24 35>;
                                layers = <0 1 2 3 4>;
                                bindings = <&kp CAPSLOCK>;
                        };

                        combo_del {
                                timeout-ms = <50>;
                                key-positions = <8 11>;
                                layers = <0 1 2 3>;
                                bindings = <&kp DEL>;
                        };
                };
        };
};

